# @file format_exon_coverage.py
# 
# Generates per-exon average coverage data.
#
# Two inputs are expected:
# -b/--bedfile  A BED file containing the target exons.
# -i/--input    The coverage output generated by BEDtools genomecov, e.g.
#               bedtools genomecov -split -dz -ibam input_file.bam -g genome.fasta > genomecov.txt

import sys
import os
import argparse
import numpy

class Exon(object):
	def __init__(self, transcript, number, start, end):
		self.number = number
		self.start = start
		self.end = end
		self.transcript = transcript
		self.coverage = {}
		# print('{0} ({1}) exon {2}: {3} bases'.format(
		# 	self.transcript.gene,
		# 	self.transcript.transcript,
		# 	self.number,
		# 	len(self)
		# 	))
		# end .__init__()

	def add_coverage(self, position, coverage):
		self.coverage[position] = coverage
		# print('{0} added coverage {1} to {2}'.format(self, coverage, position))
		# end .add_coverage()

	def average_coverage(self):
		values = []
		for position in range(self.start, self.end + 1):
			if position not in self.coverage:
				values.append(0)
			else:
				values.append(self.coverage[position])

		return int(numpy.mean(values))
		# end .average_coverage()

	def __contains__(self, value):
		return (self.start <= value <= self.end)
		# end .__contains__()

	def __repr__(self):
		return '{0} exon {1} ({2}:{3}-{4})'.format(
			self.transcript.gene,
			self.number,
			self.transcript.chromosome,
			self.start,
			self.end)
		# end .__repr__()

	def __len__(self):
		return self.end - self.start + 1
		# end .__len__()

	# end Exon class definition.



class Transcript(object):
	def __init__(self, transcript, gene, chromosome = ''):
		self.chromosome = chromosome
		self.start = -1
		self.end = -1
		self.transcript = transcript
		self.gene = gene
		self.exons = {}
		# end .__init__()

	def add_exon(self, number, start, end):
		self.exons[number] = Exon(self, number, start, end)
		if self.start == -1 or start < self.start:
			self.start = start
		if self.end == -1 or end > self.end:
			self.end = end
		# end .add_exon()

	def add_coverage(self, position, coverage):
		matched = False
		for exon in self.exons.values():
			if position in exon:
				exon.add_coverage(position, coverage)
				matched = True
				break
		# end .add_coverage()

	def coverage(self):
		output = []
		blank_as_zero = False

		for e in range(1, max(self.exons.keys())+1):
			if e in self.exons:
				if not blank_as_zero:
					blank_as_zero = True
				output.append(self.exons[e].average_coverage())
			else:
				# Exon data for this exon not found in transcript.
				if blank_as_zero:
					output.append(0)
				else:
					output.append('-')
		return output
		# end .coverage()

	def __repr__(self):
		return '{0} ({1}) {2}:{3}-{4} ({5} exons)'.format(
			self.gene,
			self.transcript,
			self.chromosome,
			self.start,
			self.end,
			len(self.exons),
			)
		# end .__repr__()

	def __contains__(self, value):
		return (self.start <= value <= self.end)
		# end .__contains__()

	# end Transcript class definition.

class Genome(object):
	def __init__(self):
		self.genome = {}
		self.genes = {}
		self.max_exon = 0
		# end .__init__()


	def coverage(self, filepath=None):
		output = {}
		header = ['Gene', 'Transcript']
		for e in range(self.max_exon):
			header.append('Exon_{0}'.format(e+1))
		output['-'] = header
		for chromosome in sorted(self.genome.keys()):
			for gene in sorted(self.genome[chromosome].keys()):
				for transcript_id in sorted(self.genome[chromosome][gene].keys()):
					transcript = self.genome[chromosome][gene][transcript_id]
					key = '{0}_{1}'.format(transcript.gene, transcript.transcript)
					output[key] = [transcript.gene, transcript.transcript] + transcript.coverage()


		if filepath is None:
			for key in sorted(output.keys()):
				data = output[key]
				print('\t'.join([str(x) for x in data]))
		else:
			with open(filepath, 'w') as fileout:
				for key in sorted(output.keys()):
					data = output[key]
					fileout.write('{0}\n'.format('\t'.join([str(x) for x in data])))
				fileout.close()

		# end .coverage()		

	def find_transcripts(self, chromosome, position):
		matches = []
		if chromosome in self.genome:
			for gene in sorted(self.genome[chromosome].keys()):
				for transcript in sorted(self.genome[chromosome][gene].keys()):
					if position in self.genome[chromosome][gene][transcript]:
						matches.append(self.genome[chromosome][gene][transcript])
		return matches
		# end .find_transcripts()

	def load_exons(self, filepath):
		with open(filepath, 'Ur') as filein:
			for line in filein:
				line = line.strip()
				if len(line):
					line = line.split('\t')
					gene_symbol, _, exon, transcript_id = [str(x).strip() for x in line[3].strip().split(' ')]
					chromosome = line[0].strip()

					if chromosome not in self.genome:
						self.genome[chromosome] = {}

					if gene_symbol not in self.genes:
						self.genes[gene_symbol] = {}
						self.genome[chromosome][gene_symbol] = self.genes[gene_symbol]
						
					if transcript_id not in self.genes[gene_symbol]:
						transcript = Transcript(chromosome=line[0], transcript=transcript_id, gene=gene_symbol)
						self.genes[gene_symbol][transcript_id] = transcript
					else:
						transcript = self.genes[gene_symbol][transcript_id]
					
					exon = int(exon)
					transcript.add_exon(exon, int(line[1]), int(line[2]))
					if exon > self.max_exon:
						self.max_exon = exon
				# end if len(line) block
			# end for loop
			filein.close()
		return True
		# end .load_exons()

	def load_coverage(self, filepath):
		with open(filepath, 'Ur') as filein:
			counter = 0
			for line in filein:
				line = line.strip()
				if len(line):
					line = line.split('\t')
					chromosome = line[0]
					position = int(line[1])
					coverage = int(line[2])

					transcripts = self.find_transcripts(chromosome, position)
					for transcript in transcripts:
						transcript.add_coverage(position, coverage)
				# end if len(line) block
			# end for loop
			filein.close()
		return True
		# end .load_coverage()
	# end Genome class definition.


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Exon Coverage')

	parser.add_argument('-b', '--bedfile', dest='bedfile', help='In-target exons BED file.')
	parser.add_argument('-g', '--genomecov', dest='genomecov', help='Genomecov output file.')
	parser.add_argument('-o', '--output', dest='output', help='Output filepath.')
	args = parser.parse_args()


	if args.bedfile is None:
		print('Error: BED file filepath not specified.')
		exit(1)
	else:
		bedfile_filepath = os.path.abspath(args.bedfile)
		if not os.path.isfile(bedfile_filepath):
			print('Error: File {0} does not exist.'.format(bedfile_filepath))
			exit(1)


	if args.genomecov is None:
		print('Error: Genomecov file filepath not specified.')
		exit(1)
	else:
		coverage_filepath = os.path.abspath(args.genomecov)
		if not os.path.isfile(coverage_filepath):
			print('Error: File {0} does not exist.'.format(coverage_filepath))
			exit(1)

	if args.output is None:
		print('Error: Output filepath not specified.')
		exit()
	else:
		output_filepath = os.path.abspath(args.output)
		if os.path.isfile(output_filepath):
			print('Warning: Output file {0} '.format(output_filepath) + 
			 'already exists and will be overwritten.')


	genome = Genome()
	genome.load_exons(bedfile_filepath)

	genome.load_coverage(coverage_filepath)
	genome.coverage(output_filepath)
